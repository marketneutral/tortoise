diff --git a/from_cells.py b/final.py
index 9986410..5f1c894 100644
--- a/from_cells.py
+++ b/final.py
@@ -1,3 +1,4 @@
+
 class TreeEnsemble():
     def __init__(self, x, y, n_trees, sample_sz, min_leaf=5):
         np.random.seed(42)
@@ -5,8 +6,8 @@ class TreeEnsemble():
         self.trees = [self.create_tree() for i in range(n_trees)]
 
     def create_tree(self):
-        rnd_idxs = np.random.permutation(len(self.y))[:self.sample_sz]
-        return DecisionTree(self.x.iloc[rnd_idxs], self.y[rnd_idxs], 
+        idxs = np.random.permutation(len(self.y))[:self.sample_sz]
+        return DecisionTree(self.x.iloc[idxs], self.y[idxs], 
                     idxs=np.array(range(self.sample_sz)), min_leaf=self.min_leaf)
         
     def predict(self, x):
@@ -15,8 +16,7 @@ class TreeEnsemble():
 def std_agg(cnt, s1, s2): return math.sqrt((s2/cnt) - (s1/cnt)**2)
 
 class DecisionTree():
-    def __init__(self, x, y, idxs=None, min_leaf=5):
-        if idxs is None: idxs=np.arange(len(y))
+    def __init__(self, x, y, idxs, min_leaf=5):
         self.x,self.y,self.idxs,self.min_leaf = x,y,idxs,min_leaf
         self.n,self.c = len(idxs), x.shape[1]
         self.val = np.mean(y[idxs])
@@ -25,7 +25,7 @@ class DecisionTree():
         
     def find_varsplit(self):
         for i in range(self.c): self.find_better_split(i)
-        if self.is_leaf: return
+        if self.score == float('inf'): return
         x = self.split_col
         lhs = np.nonzero(x<=self.split)[0]
         rhs = np.nonzero(x>self.split)[0]
